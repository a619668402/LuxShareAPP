draw()在android官方文档中将该过程分为6步:
1.绘制背景

2.保存当前画布的堆栈状态并在该画布上创建Layer用于绘制View在滑动的边框渐变效果,通常情况下我们是不需要处理这一步的

3.绘制View的内容,这一步是draw阶段的核心,在此会调用onDraw方法绘制View的内容.

onLayout方法是一个抽象方法,具体的逻辑由ViewGroup的子类实现.与之类似,onDraw是一个空方法,因为每个View所要绘制的内容不同,所以需要由具体的子View去实现各自不同的需求.

4调用dispatchDraw绘制View的子View

5.绘制当前视图在滑动的边框渐变效果,通常情况下我们是不需要处理这一步的.

6.绘制View的滚动条.
不单单是常见的ScrollView和ListView等滑动控件有滚动条,任何一个View都有,只是一般情况下我们都没有将它显示出来而已.


android官方关于canvas的介绍告诉开发者:
在绘图的时候需要明确四个核心的东西:
1.用什么工具画?
需要一直画笔(Paint),可以设置不同的颜色和不同大小

2.把图画到哪?
我们把图画在了Bitmap上,它保存了所绘图像的各个像素(pixel),也就是说Bitmap承载和呈现了画的各种图形.

3.画的内容?
根据自己的需求画圆,画直线,画路径

4.怎么画?
调用canvas执行绘图操作,比如:canvas.drawCircle(),canvas.drawLine(),canvas.drawPath()等


canvas.translate
canvas.rotate
canvas.clipRect
canvas.save和canvas.restore
PorterDuffXfermode
Bitmap和Matrix
Shader
PathEffect


canvas.translate:位移
平移之后的位置=平移前的坐标+平移单位

canvas.rotate:旋转
canvas.rotate相当于把坐标系旋转了一定角度

canvas.clipRect:裁剪操作,执行该操作后绘制将显示在裁剪区域,如果再继续画图那么所绘的图只会在所裁剪的范围内体现.除了按照矩形裁剪以外,还可以有别的裁剪方式,比如:canvas.clipPath和canvas.clipRegion().


canvas.save和canvas.restore:
canvas.save表示画布的锁定.如果对一个canvas执行了save操作就表示将已经所绘的图形锁定,之后的绘图就不会影响到原来画好的图形.
当执行canvas.save()时会生成一个新的图层(Layer),并且这个图层是透明的,此时所有的draw的方法都是在这个图层上进行,所以不会对之前的图形造成任何影响.在进行一些绘制操作后在使用canvas.restore()将这个新的图层与底下原本画好的图像想结合后形成一个新的图像.
注意:
canvas.save()和canvas.restore()最好配对使用,若restore()的调用次数比save()多可能会造成异常.

PorterDuffXfermode

PorterDuff.Mode.CLEAR
绘制不会提交到画布上
PorterDuff.Mode.SRC
只显示绘制源图像
PorterDuff.Mode.DST
只显示目标图像，即已在画布上的初始图像
PorterDuff.Mode.SRC_OVER
正常绘制显示，即后绘制的叠加在原来绘制的图上
PorterDuff.Mode.DST_OVER
上下两层都显示但是下层(DST)居上显示
PorterDuff.Mode.SRC_IN
取两层绘制的交集且只显示上层(SRC)
PorterDuff.Mode.DST_IN
取两层绘制的交集且只显示下层(DST)
PorterDuff.Mode.SRC_OUT
取两层绘制的不相交的部分且只显示上层(SRC)
PorterDuff.Mode.DST_OUT
取两层绘制的不相交的部分且只显示下层(DST)
PorterDuff.Mode.SRC_ATOP
两层相交，取下层(DST)的非相交部分和上层(SRC)的相交部分
PorterDuff.Mode.DST_ATOP
两层相交，取上层(SRC)的非相交部分和下层(DST)的相交部分
PorterDuff.Mode.XOR
挖去两图层相交的部分
PorterDuff.Mode.DARKEN
显示两图层全部区域且加深交集部分的颜色
PorterDuff.Mode.LIGHTEN
显示两图层全部区域且点亮交集部分的颜色
PorterDuff.Mode.MULTIPLY
显示两图层相交部分且加深该部分的颜色
PorterDuff.Mode.SCREEN
显示两图层全部区域且将该部分颜色变为透明色


Bitmap和Matrix:
Matrix所操作的时原图的每个像素点,它和坐标系是没有关系的.
在使用Matrix时经常用到一系列的set,pre,post方法.
在调用set,pre,post时可视为将这些方法插入到一个队列
pre:在队头插入一个方法
post:在队尾插入一个方法
set:表示清空队列,队列中只保留该set方法,其余方法都会清除


Shader:图像渐变效果,渲染图像以及几何图形.
Shader的主要子类:
BitmapShader:图像渲染
LinearGradient:线性渲染
RadialGradient:环形渲染
SweepGradient:扫描渲染
ComposeShader:组合渲染

TileMode:
REPEAT:重复
MIRROR:镜像
CLAMP:拉伸



PathEffect:通过canvas.drawPath可以绘制一些简单的路径,但是假若要给路径设置一些效果或者样式,需要使用PathEffect.

PathEffect子类:

1.CornerPathEffect:用平滑的方式衔接Path的各部分
DashPathEffect:将Path的线段虚线化
2.PathDashPathEffect:与DashPathEffect效果类似但需要自定义路径虚线样式
3.DiscretePathEffect:离散路径效果
4.ComposePathEffect:两种样式的组合,先使用第一种效果然后在此基础上应用第二种效果
5.SumPathEffect:两种样式的叠加,现将两种路径效果叠加起来再作用于Path.


1.设置CornerPathEffect效果,在构建CornerPathEffect时传入了radius,表示圆角度数
2.设置Path为DashPathEffect效果,在构建DashPathEffect时传入的第一个参数:float[]{}中第一个数表示每条实线的长度,第二个数表示每条虚线的长度,第二个参数phase表示偏移量,动态改变该值会使路径产生动画效果.

























